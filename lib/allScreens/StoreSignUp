import 'package:cloud_firestore/cloud_firestore.dart';
import 'package:expresso_mobile_app/allScreens/storeHomeScreen.dart';
import 'package:firebase_auth/firebase_auth.dart';
import 'package:flutter/material.dart';

class StoreLogin extends StatefulWidget {
  static const routeName = '/StoreLogin';
  @override
  _StoreLoginState createState() => _StoreLoginState();
}

class _StoreLoginState extends State<StoreLogin> {
  String yourName;
  String storeName;
  String emailAdress;
  double phoneNumber;
  String passWord;

  final TextEditingController nameController = TextEditingController();
  final TextEditingController storeNameController = TextEditingController();
  final TextEditingController emailAdressController = TextEditingController();
  final TextEditingController phoneNumberContoller = TextEditingController();
  final TextEditingController passWordController = TextEditingController();
  final TextEditingController passWordConfirmController =
      TextEditingController();

  bool _isLoading = false;

  FirebaseAuth auth = FirebaseAuth.instance;
  FirebaseFirestore firestore = FirebaseFirestore.instance;
  CollectionReference stores = FirebaseFirestore.instance.collection("stores");

  Future fireBaseRegister() async {
    setState(() {
      _isLoading = true;
    });
    try {
      UserCredential storeCredential =
          await FirebaseAuth.instance.createUserWithEmailAndPassword(
        email: emailAdress,
        password: passWord,
      );
      try {
        stores.add({
          'userid': storeCredential.user.uid,
          'yourName': yourName,
          'storeName': storeName,
          'email': emailAdress,
          'phone': phoneNumber,
          'password': passWord
        });
      } catch (e) {
        throw (e);
      }
      setState(() {
        _isLoading = false;
      });
      Navigator.of(context).pushNamed(StoreHomeScreen.routeName);
    } on FirebaseAuthException catch (e) {
      if (e.code == 'weak-password') {
        print('The password provided is too weak.');
      } else if (e.code == 'email-already-in-use') {
        print('The account already exists for that email.');
        setState(() {
          _isLoading = false;
        });
      }
    } catch (e) {
      print(e);
    }
  }

  Future<void> signUpStore() async {
    if (passWordController.text == passWordConfirmController.text &&
        nameController.text.isNotEmpty &&
        storeNameController.text.isNotEmpty &&
        emailAdressController.text.isNotEmpty &&
        phoneNumberContoller.text.isNotEmpty) {
      setState(() {
        yourName = nameController.text;
        storeName = storeNameController.text;
        emailAdress = emailAdressController.text;
        phoneNumber = double.parse(phoneNumberContoller.text);
        passWord = passWordController.text;
        fireBaseRegister();
        print(yourName + passWord);
      });
    } else {
      AlertDialog(
        content: Text('Double check info'),
        actions: [
          TextButton(
            onPressed: () => Navigator.of(context).pop(),
            child: Text('Okay'),
          )
        ],
      );
    }
  }

  @override
  Widget build(BuildContext context) {
    return Scaffold(
        body: _isLoading
            ? Center(
                child: CircularProgressIndicator(),
              )
            : SingleChildScrollView(
                child: Padding(
                  padding: const EdgeInsets.all(25),
                  child: Column(
                    mainAxisAlignment: MainAxisAlignment.spaceEvenly,
                    children: [
                      Padding(
                        padding: const EdgeInsets.only(top: 15.0),
                        child: Center(
                          child: Container(
                            child: Image.asset(
                                "assets/images/Expresso Name Transparent Background.png"),
                          ),
                        ),
                      ),
                      Padding(
                        padding: EdgeInsets.all(15),
                        child: TextFormField(
                          keyboardType: TextInputType.name,
                          controller: nameController,
                          decoration: InputDecoration(labelText: 'Your Name'),
                        ),
                      ),
                      Padding(
                        padding: EdgeInsets.all(15),
                        child: TextFormField(
                          keyboardType: TextInputType.name,
                          controller: storeNameController,
                          decoration: InputDecoration(labelText: 'Store Name'),
                        ),
                      ),
                      Padding(
                        padding: EdgeInsets.all(15),
                        child: TextFormField(
                          keyboardType: TextInputType.emailAddress,
                          controller: emailAdressController,
                          decoration:
                              InputDecoration(labelText: 'Email Adress'),
                        ),
                      ),
                      Padding(
                        padding: EdgeInsets.all(15),
                        child: TextFormField(
                          keyboardType: TextInputType.phone,
                          controller: phoneNumberContoller,
                          decoration:
                              InputDecoration(labelText: 'Phone number'),
                        ),
                      ),
                      Padding(
                        padding: EdgeInsets.all(15),
                        child: TextFormField(
                          keyboardType: TextInputType.visiblePassword,
                          obscureText: true,
                          controller: passWordController,
                          decoration: InputDecoration(labelText: 'Password'),
                        ),
                      ),
                      Padding(
                        padding: EdgeInsets.all(15),
                        child: TextFormField(
                          obscureText: true,
                          controller: passWordConfirmController,
                          decoration:
                              InputDecoration(labelText: 'Confrim Password'),
                        ),
                      ),
                      ElevatedButton(
                          onPressed: () => signUpStore(), child: Text('Next'))
                    ],
                  ),
                ),
              ));
  }
}
